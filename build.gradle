buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = '1.4.25-1.18.2'
group = 'net.tracen' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'umapyoi'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.umapyoi.refmap.json'
}

minecraft {
    mappings channel: 'parchment', version: '1.18.2-2022.08.07-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'umapyoi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    maven { url = "https://raw.github.com/0999312/MMMaven/main/repository" }
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    // JEI, Tinker's Construct, Mantle, Iron Chests, Natura, etc.
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    // Patchouli
    maven { url = 'https://maven.blamejared.com' }

    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }

	maven { url "https://maven.shedaniel.me/" }

	flatDir {
        dirs 'libs'
    }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.73'
    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("cn.mcmod_mmf.mmlib:MMLib:1.4.5-1.18.2")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.1:api")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-70")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-70")

    compileOnly fg.deobf("mezz.jei:jei-1.18.2-forge:10.0.0.191")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2-forge:10.0.0.191")

	compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:6.5.102")
	compileOnly fg.deobf("dev.tr7zw.firstperson:firstperson-forge:2.2.3-mc1.18.2")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "umapyoi",
                "Specification-Vendor"    : "tracen_minecraft_group",
                "Specification-Version"   : "0.0.2",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "tracen_minecraft_group",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.umapyoi.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
